fn id : a -> a
    x = x

post ! 10
fn (!) : int -> int
    n = 1

infl * 5
// extern mul_int : int -> int -> int
fn (*) : int -> int -> int
    a b = a // mul_int a b

let test : int = let n = (5) in id (let n = n in id n)
let abc : bool = let res = id prelude.id true in if res then res else false
let twenty : int = 2! * 10 * 2 * 42!

let whatprev : char = let f = \x y -> y in if f false true then 'x' else 'z'

let what : char = let f = \q -> q in f 'x'
