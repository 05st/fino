import stl.prelude

export mandelbrot

fn pd : int -> unit
    x =
        if x > 8 then
            print_char '#'
        else if x > 4 then
            print_char '+'
        else if x > 2 then
            print_char '.'
        else
            print_char ' '

fn converge : int -> float -> float -> float -> float -> int
    iters cr ci r i =
        let r2 = r *. r in
        let i2 = i *. i in
            if (r2 +. i2) <. 4.0 && iters < 256 then
                converge (iters + 1) cr ci (r2 -. i2 +. cr) (r *. i *. 2.0 +. ci)
            else
                iters

fn plot : float -> float -> unit
    x y =
        if y <. ymax then
            if x <. xmax then
                pd (converge 0 x y 0.0 0.0) >> plot (x +. xstep) y
            else
                print_str "\n" >> plot xmin (y +. ystep)
        else
            ()

let xmin : float = -2.5
let ymin : float = -1.3
let xstep : float = 0.05
let ystep : float = 0.07
let xmax : float = xmin +. xstep *. 78.0
let ymax : float = ymin +. ystep *. 40.0

fn repeat : int -> unit
    n = if n < 10 then plot xmin ymin >> repeat (n + 1) else ()

let mandelbrot: unit = repeat 0
