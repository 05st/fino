infl ++ 2
infl <$> 3

type List a = Nil | Cons a (List a)

fn map : (a -> b) -> List a -> List b
    f List.Nil = List.Nil
    f (List.Cons x rest) = List.Cons (f x) (map f rest)

let (<$>) = map

fn foldl : (a -> a -> a) -> a -> List a -> a
    f a List.Nil = a
    f a (List.Cons x rest) = foldl f (f a x) rest

fn (++) : List a -> List a -> List a
    (List.Nil) b = b
    (List.Cons x rest) b = List.Cons x (append rest b)

let append = (++)

fn concat : List (List a) -> List a
    List.Nil = List.Nil
    List.Cons l rest = append l (concat rest)

fn concatMap : (a -> List b) -> List a -> List b
    f list = concat (map f list)
